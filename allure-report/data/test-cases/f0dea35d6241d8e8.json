{"uid":"f0dea35d6241d8e8","name":"test_register[chromium-Ничего не поставлено-Ничего не поставлено-Введен набор цифр \"123\"-Ничего не введено-Не выбран ни один пункт меню-Правильное имя компании \"ООО \"Макс\"\"-Незаполненное поле]","fullName":"test_page#test_register","historyId":"ead83f2aba071917c119f7369dbf2410","time":{"start":1664207597955,"stop":1664207605618,"duration":7663},"status":"failed","statusMessage":"AssertionError: Неправильно заполненные данные\nassert False","statusTrace":"test_page = <models.TestPage.TestPage object at 0x0000026AE6FB67C0>, data = {'company': 'ООО \"Макс\"', 'confirm': False, 'division': None, 'email': None, ...}, key = 'subscribe', value = False\n\n    @allure.step\n    def fill_register(test_page: TestPage, **data):\n    \n    \n        for key, value in data.items():\n            if key == \"name\" and value is not None: test_page.name_field.fill(value)\n            if key == \"company\" and value is not None: test_page.company_field.fill(value)\n            if key == \"division\" and value is not None: test_page.division_select.select_option(value=value)\n            if key == \"email\" and value is not None: test_page.email_field.fill(value)\n            if key == \"phone\" and value is not None: test_page.phone_field.fill(value)\n            if key == \"confirm\" and value:test_page.confirm_checkbox.click(force=True)\n            if key == \"subscribe\" and value: test_page.sub_checkbox.click(force=True)\n    \n        try:\n            test_page.submit_button.click()\n>           assert test_page.confirm_message.inner_text() == \"Мы свяжемся с вами с 10 до 19 в будний день.\",\\\n                                                             \"Неправильно заполненные данные\"\n\ntest_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <models.TestPage.TestPage object at 0x0000026AE6FB67C0>\n\n    @property\n    def confirm_message(self):\n>       return self.page.wait_for_selector(\"div.lp-html.lp-description\")\n\nmodels\\TestPage.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://scan-interfax.ru/'>, selector = 'div.lp-html.lp-description'\n\n    def wait_for_selector(\n        self,\n        selector: str,\n        *,\n        timeout: typing.Optional[float] = None,\n        state: typing.Optional[\n            Literal[\"attached\", \"detached\", \"hidden\", \"visible\"]\n        ] = None,\n        strict: typing.Optional[bool] = None\n    ) -> typing.Optional[\"ElementHandle\"]:\n        \"\"\"Page.wait_for_selector\n    \n        Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or\n        `detached`.\n    \n        > NOTE: Playwright automatically waits for element to be ready before performing an action. Using `Locator` objects and\n        web-first assertions makes the code wait-for-selector-free.\n    \n        Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at\n        the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the\n        selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n    \n        This method works across navigations:\n    \n        ```py\n        from playwright.sync_api import sync_playwright\n    \n        def run(playwright):\n            chromium = playwright.chromium\n            browser = chromium.launch()\n            page = browser.new_page()\n            for current_url in [\\\"https://google.com\\\", \\\"https://bbc.com\\\"]:\n                page.goto(current_url, wait_until=\\\"domcontentloaded\\\")\n                element = page.wait_for_selector(\\\"img\\\")\n                print(\\\"Loaded image: \\\" + str(element.get_attribute(\\\"src\\\")))\n            browser.close()\n    \n        with sync_playwright() as playwright:\n            run(playwright)\n        ```\n    \n        Parameters\n        ----------\n        selector : str\n            A selector to query for. See [working with selectors](../selectors.md) for more details.\n        timeout : Union[float, None]\n            Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\n            using the `browser_context.set_default_timeout()` or `page.set_default_timeout()` methods.\n        state : Union[\"attached\", \"detached\", \"hidden\", \"visible\", None]\n            Defaults to `'visible'`. Can be either:\n            - `'attached'` - wait for element to be present in DOM.\n            - `'detached'` - wait for element to not be present in DOM.\n            - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without\n              any content or with `display:none` has an empty bounding box and is not considered visible.\n            - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`.\n              This is opposite to the `'visible'` option.\n        strict : Union[bool, None]\n            When true, the call requires selector to resolve to a single element. If given selector resolves to more than one\n            element, the call throws an exception.\n    \n        Returns\n        -------\n        Union[ElementHandle, None]\n        \"\"\"\n    \n        return mapping.from_impl_nullable(\n>           self._sync(\n                self._impl_obj.wait_for_selector(\n                    selector=selector, timeout=timeout, state=state, strict=strict\n                )\n            )\n        )\n\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:6581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://scan-interfax.ru/'>, coro = <coroutine object Page.wait_for_selector at 0x0000026AE857DE40>\n\n    def _sync(\n        self,\n        coro: Union[Coroutine[Any, Any, Any], Generator[Any, Any, Any]],\n    ) -> Any:\n        __tracebackhide__ = True\n        g_self = greenlet.getcurrent()\n        task: asyncio.tasks.Task[Any] = self._loop.create_task(coro)\n        setattr(task, \"__pw_stack__\", inspect.stack())\n        setattr(task, \"__pw_stack_trace__\", traceback.extract_stack())\n    \n        task.add_done_callback(lambda _: g_self.switch())\n        while not task.done():\n            self._dispatcher_fiber.switch()\n        asyncio._set_running_loop(self._loop)\n>       return task.result()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://scan-interfax.ru/'>, selector = 'div.lp-html.lp-description', timeout = None, state = None, strict = None\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n        strict: bool = None,\n    ) -> Optional[ElementHandle]:\n>       return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Frame name= url='https://scan-interfax.ru/'>, selector = 'div.lp-html.lp-description', strict = None, timeout = None, state = None\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        strict: bool = None,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n    ) -> Optional[ElementHandle]:\n        return from_nullable_channel(\n>           await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000026AE8A0ADF0>, method = 'waitForSelector', params = {'selector': 'div.lp-html.lp-description'}\n\n    async def send(self, method: str, params: Dict = None) -> Any:\n>       return await self._connection.wrap_api_call(\n            lambda: self.inner_send(method, params, False)\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000026AE3D388E0>, cb = <function Channel.send.<locals>.<lambda> at 0x0000026AE84F6B80>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        metadata = _extract_metadata_from_stack(st, is_internal)\n        if metadata:\n            self._api_zone.set(metadata)\n        try:\n>           return await cb()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000026AE8A0ADF0>, method = 'waitForSelector', params = {'selector': 'div.lp-html.lp-description'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 3500ms exceeded.\nE       =========================== logs ===========================\nE       waiting for selector \"div.lp-html.lp-description\" to be visible\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:78: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\npage = <Page url='https://scan-interfax.ru/'>, Name = None, Company = 'ООО \"Макс\"', Division = None, Email = None, Phone = '123', Confirm = False, Subscribe = False\n\n    @pytest.mark.parametrize('Name', [\"Макс\", None], ids=['Правильное имя \"Макс\"', 'Незаполненное поле'])\n    @pytest.mark.parametrize('Company', [\"ООО \\\"Макс\\\"\", None], ids=['Правильное имя компании \"ООО \\\"Макс\\\"\"',\n                                                                     'Незаполненное поле'])\n    @pytest.mark.parametrize('Division', [\"PR\", None], ids=['Выбран пункт меню', 'Не выбран ни один пункт меню'])\n    @pytest.mark.parametrize('Email', [\"Maks@Maks.ru\", \"maks@\", None], ids=['Правильно введенный email', 'Введено \"maks@\"',\n                                                                                    'Ничего не введено'])\n    @pytest.mark.parametrize('Phone', [\"79009009090\", \"123\", None], ids=['Введен телефон правильного формата',\n                                                                         'Введен набор цифр \"123\"', 'Ничего не введено'])\n    @pytest.mark.parametrize('Confirm', [True, False], ids=['Галочка поставленна в поле соглашения','Ничего не поставлено'])\n    @pytest.mark.parametrize('Subscribe', [True, False], ids=['Галочка поставленна в поле рассылки','Ничего не поставлено'])\n    def test_register(page: Page, Name, Company, Division, Email, Phone, Confirm, Subscribe):\n        test_page = TestPage(page)\n        test_page.navigate()\n>       fill_register(test_page, name=Name, company=Company, division=Division, email=Email, phone=Phone, confirm=Confirm,\n                      subscribe=Subscribe)\n\ntest_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_page = <models.TestPage.TestPage object at 0x0000026AE6FB67C0>, data = {'company': 'ООО \"Макс\"', 'confirm': False, 'division': None, 'email': None, ...}, key = 'subscribe', value = False\n\n    @allure.step\n    def fill_register(test_page: TestPage, **data):\n    \n    \n        for key, value in data.items():\n            if key == \"name\" and value is not None: test_page.name_field.fill(value)\n            if key == \"company\" and value is not None: test_page.company_field.fill(value)\n            if key == \"division\" and value is not None: test_page.division_select.select_option(value=value)\n            if key == \"email\" and value is not None: test_page.email_field.fill(value)\n            if key == \"phone\" and value is not None: test_page.phone_field.fill(value)\n            if key == \"confirm\" and value:test_page.confirm_checkbox.click(force=True)\n            if key == \"subscribe\" and value: test_page.sub_checkbox.click(force=True)\n    \n        try:\n            test_page.submit_button.click()\n            assert test_page.confirm_message.inner_text() == \"Мы свяжемся с вами с 10 до 19 в будний день.\",\\\n                                                             \"Неправильно заполненные данные\"\n        except:\n>           assert False, \"Неправильно заполненные данные\"\nE           AssertionError: Неправильно заполненные данные\nE           assert False\n\ntest_page.py:26: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser_type_launch_args","time":{"start":1664205504197,"stop":1664205504197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"playwright","time":{"start":1664205504197,"stop":1664205504515,"duration":318},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_url","time":{"start":1664205504197,"stop":1664205504197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"delete_output_dir","time":{"start":1664205504197,"stop":1664205504197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_verify_url","time":{"start":1664205504197,"stop":1664205504197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"pytestconfig","time":{"start":1664205504197,"stop":1664205504197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_type","time":{"start":1664205504515,"stop":1664205504515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser","time":{"start":1664205504515,"stop":1664205504730,"duration":215},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"launch_browser","time":{"start":1664205504515,"stop":1664205504515,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_context_args","time":{"start":1664205504730,"stop":1664205504730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"device","time":{"start":1664205504730,"stop":1664205504730,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"context","time":{"start":1664207597877,"stop":1664207597887,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"page","time":{"start":1664207597887,"stop":1664207597954,"duration":67},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неправильно заполненные данные\nassert False","statusTrace":"test_page = <models.TestPage.TestPage object at 0x0000026AE6FB67C0>, data = {'company': 'ООО \"Макс\"', 'confirm': False, 'division': None, 'email': None, ...}, key = 'subscribe', value = False\n\n    @allure.step\n    def fill_register(test_page: TestPage, **data):\n    \n    \n        for key, value in data.items():\n            if key == \"name\" and value is not None: test_page.name_field.fill(value)\n            if key == \"company\" and value is not None: test_page.company_field.fill(value)\n            if key == \"division\" and value is not None: test_page.division_select.select_option(value=value)\n            if key == \"email\" and value is not None: test_page.email_field.fill(value)\n            if key == \"phone\" and value is not None: test_page.phone_field.fill(value)\n            if key == \"confirm\" and value:test_page.confirm_checkbox.click(force=True)\n            if key == \"subscribe\" and value: test_page.sub_checkbox.click(force=True)\n    \n        try:\n            test_page.submit_button.click()\n>           assert test_page.confirm_message.inner_text() == \"Мы свяжемся с вами с 10 до 19 в будний день.\",\\\n                                                             \"Неправильно заполненные данные\"\n\ntest_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <models.TestPage.TestPage object at 0x0000026AE6FB67C0>\n\n    @property\n    def confirm_message(self):\n>       return self.page.wait_for_selector(\"div.lp-html.lp-description\")\n\nmodels\\TestPage.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://scan-interfax.ru/'>, selector = 'div.lp-html.lp-description'\n\n    def wait_for_selector(\n        self,\n        selector: str,\n        *,\n        timeout: typing.Optional[float] = None,\n        state: typing.Optional[\n            Literal[\"attached\", \"detached\", \"hidden\", \"visible\"]\n        ] = None,\n        strict: typing.Optional[bool] = None\n    ) -> typing.Optional[\"ElementHandle\"]:\n        \"\"\"Page.wait_for_selector\n    \n        Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or\n        `detached`.\n    \n        > NOTE: Playwright automatically waits for element to be ready before performing an action. Using `Locator` objects and\n        web-first assertions makes the code wait-for-selector-free.\n    \n        Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If at\n        the moment of calling the method `selector` already satisfies the condition, the method will return immediately. If the\n        selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n    \n        This method works across navigations:\n    \n        ```py\n        from playwright.sync_api import sync_playwright\n    \n        def run(playwright):\n            chromium = playwright.chromium\n            browser = chromium.launch()\n            page = browser.new_page()\n            for current_url in [\\\"https://google.com\\\", \\\"https://bbc.com\\\"]:\n                page.goto(current_url, wait_until=\\\"domcontentloaded\\\")\n                element = page.wait_for_selector(\\\"img\\\")\n                print(\\\"Loaded image: \\\" + str(element.get_attribute(\\\"src\\\")))\n            browser.close()\n    \n        with sync_playwright() as playwright:\n            run(playwright)\n        ```\n    \n        Parameters\n        ----------\n        selector : str\n            A selector to query for. See [working with selectors](../selectors.md) for more details.\n        timeout : Union[float, None]\n            Maximum time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The default value can be changed by\n            using the `browser_context.set_default_timeout()` or `page.set_default_timeout()` methods.\n        state : Union[\"attached\", \"detached\", \"hidden\", \"visible\", None]\n            Defaults to `'visible'`. Can be either:\n            - `'attached'` - wait for element to be present in DOM.\n            - `'detached'` - wait for element to not be present in DOM.\n            - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element without\n              any content or with `display:none` has an empty bounding box and is not considered visible.\n            - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or `visibility:hidden`.\n              This is opposite to the `'visible'` option.\n        strict : Union[bool, None]\n            When true, the call requires selector to resolve to a single element. If given selector resolves to more than one\n            element, the call throws an exception.\n    \n        Returns\n        -------\n        Union[ElementHandle, None]\n        \"\"\"\n    \n        return mapping.from_impl_nullable(\n>           self._sync(\n                self._impl_obj.wait_for_selector(\n                    selector=selector, timeout=timeout, state=state, strict=strict\n                )\n            )\n        )\n\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:6581: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://scan-interfax.ru/'>, coro = <coroutine object Page.wait_for_selector at 0x0000026AE857DE40>\n\n    def _sync(\n        self,\n        coro: Union[Coroutine[Any, Any, Any], Generator[Any, Any, Any]],\n    ) -> Any:\n        __tracebackhide__ = True\n        g_self = greenlet.getcurrent()\n        task: asyncio.tasks.Task[Any] = self._loop.create_task(coro)\n        setattr(task, \"__pw_stack__\", inspect.stack())\n        setattr(task, \"__pw_stack_trace__\", traceback.extract_stack())\n    \n        task.add_done_callback(lambda _: g_self.switch())\n        while not task.done():\n            self._dispatcher_fiber.switch()\n        asyncio._set_running_loop(self._loop)\n>       return task.result()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page url='https://scan-interfax.ru/'>, selector = 'div.lp-html.lp-description', timeout = None, state = None, strict = None\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n        strict: bool = None,\n    ) -> Optional[ElementHandle]:\n>       return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Frame name= url='https://scan-interfax.ru/'>, selector = 'div.lp-html.lp-description', strict = None, timeout = None, state = None\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        strict: bool = None,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n    ) -> Optional[ElementHandle]:\n        return from_nullable_channel(\n>           await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000026AE8A0ADF0>, method = 'waitForSelector', params = {'selector': 'div.lp-html.lp-description'}\n\n    async def send(self, method: str, params: Dict = None) -> Any:\n>       return await self._connection.wrap_api_call(\n            lambda: self.inner_send(method, params, False)\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000026AE3D388E0>, cb = <function Channel.send.<locals>.<lambda> at 0x0000026AE84F6B80>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        metadata = _extract_metadata_from_stack(st, is_internal)\n        if metadata:\n            self._api_zone.set(metadata)\n        try:\n>           return await cb()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:387: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Channel object at 0x0000026AE8A0ADF0>, method = 'waitForSelector', params = {'selector': 'div.lp-html.lp-description'}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        callback = self._connection._send_message_to_server(self._guid, method, params)\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._api_types.TimeoutError: Timeout 3500ms exceeded.\nE       =========================== logs ===========================\nE       waiting for selector \"div.lp-html.lp-description\" to be visible\nE       ============================================================\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:78: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\npage = <Page url='https://scan-interfax.ru/'>, Name = None, Company = 'ООО \"Макс\"', Division = None, Email = None, Phone = '123', Confirm = False, Subscribe = False\n\n    @pytest.mark.parametrize('Name', [\"Макс\", None], ids=['Правильное имя \"Макс\"', 'Незаполненное поле'])\n    @pytest.mark.parametrize('Company', [\"ООО \\\"Макс\\\"\", None], ids=['Правильное имя компании \"ООО \\\"Макс\\\"\"',\n                                                                     'Незаполненное поле'])\n    @pytest.mark.parametrize('Division', [\"PR\", None], ids=['Выбран пункт меню', 'Не выбран ни один пункт меню'])\n    @pytest.mark.parametrize('Email', [\"Maks@Maks.ru\", \"maks@\", None], ids=['Правильно введенный email', 'Введено \"maks@\"',\n                                                                                    'Ничего не введено'])\n    @pytest.mark.parametrize('Phone', [\"79009009090\", \"123\", None], ids=['Введен телефон правильного формата',\n                                                                         'Введен набор цифр \"123\"', 'Ничего не введено'])\n    @pytest.mark.parametrize('Confirm', [True, False], ids=['Галочка поставленна в поле соглашения','Ничего не поставлено'])\n    @pytest.mark.parametrize('Subscribe', [True, False], ids=['Галочка поставленна в поле рассылки','Ничего не поставлено'])\n    def test_register(page: Page, Name, Company, Division, Email, Phone, Confirm, Subscribe):\n        test_page = TestPage(page)\n        test_page.navigate()\n>       fill_register(test_page, name=Name, company=Company, division=Division, email=Email, phone=Phone, confirm=Confirm,\n                      subscribe=Subscribe)\n\ntest_page.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntest_page = <models.TestPage.TestPage object at 0x0000026AE6FB67C0>, data = {'company': 'ООО \"Макс\"', 'confirm': False, 'division': None, 'email': None, ...}, key = 'subscribe', value = False\n\n    @allure.step\n    def fill_register(test_page: TestPage, **data):\n    \n    \n        for key, value in data.items():\n            if key == \"name\" and value is not None: test_page.name_field.fill(value)\n            if key == \"company\" and value is not None: test_page.company_field.fill(value)\n            if key == \"division\" and value is not None: test_page.division_select.select_option(value=value)\n            if key == \"email\" and value is not None: test_page.email_field.fill(value)\n            if key == \"phone\" and value is not None: test_page.phone_field.fill(value)\n            if key == \"confirm\" and value:test_page.confirm_checkbox.click(force=True)\n            if key == \"subscribe\" and value: test_page.sub_checkbox.click(force=True)\n    \n        try:\n            test_page.submit_button.click()\n            assert test_page.confirm_message.inner_text() == \"Мы свяжемся с вами с 10 до 19 в будний день.\",\\\n                                                             \"Неправильно заполненные данные\"\n        except:\n>           assert False, \"Неправильно заполненные данные\"\nE           AssertionError: Неправильно заполненные данные\nE           assert False\n\ntest_page.py:26: AssertionError","steps":[{"name":"fill_register","time":{"start":1664207601848,"stop":1664207605617,"duration":3769},"status":"failed","statusMessage":"AssertionError: Неправильно заполненные данные\nassert False\n","statusTrace":"  File \"C:\\Users\\Max\\PycharmProjects\\tests\\playwrightTests\\JobTest\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Max\\PycharmProjects\\tests\\playwrightTests\\JobTest\\test_page.py\", line 26, in fill_register\n    assert False, \"Неправильно заполненные данные\"\n","steps":[],"attachments":[],"parameters":[{"name":"test_page","value":"<models.TestPage.TestPage object at 0x0000026AE6FB67C0>"},{"name":"name","value":"None"},{"name":"company","value":"'ООО \"Макс\"'"},{"name":"division","value":"None"},{"name":"email","value":"None"},{"name":"phone","value":"'123'"},{"name":"confirm","value":"False"},{"name":"subscribe","value":"False"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"page::0","time":{"start":1664207605810,"stop":1664207605810,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"context::0","time":{"start":1664207605810,"stop":1664207605853,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser::0","time":{"start":1664207813277,"stop":1664207813321,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"playwright::0","time":{"start":1664207813341,"stop":1664207813356,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"suite","value":"test_page"},{"name":"host","value":"HOME-PC"},{"name":"thread","value":"17380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"Company","value":"'ООО \"Макс\"'"},{"name":"Confirm","value":"False"},{"name":"Division","value":"None"},{"name":"Email","value":"None"},{"name":"Name","value":"None"},{"name":"Phone","value":"'123'"},{"name":"Subscribe","value":"False"},{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f0dea35d6241d8e8.json","parameterValues":["'ООО \"Макс\"'","False","None","None","None","'123'","False","'chromium'"]}